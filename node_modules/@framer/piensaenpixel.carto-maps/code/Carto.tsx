import * as React from "react";
import { PropertyControls, ControlType } from "framer";
// import { Map, Marker, Popup, TileLayer } from "react-leaflet";
import * as L from "leaflet";
import 'leaflet/dist/leaflet.css';

const style: React.CSSProperties = {
    height: "100%",
    width: "100%",
    overflow: "hidden",
};

// Define type of property
interface Props {
    attributionText: string;
    latitude: number;
    longitude: number;
    zoom: number;
    basemap: string;
    zoomControl: boolean;
    attributions: boolean;
    city: string;
}
                            
let cities: any = {}
cities["Custom..."] = {center: [40.416775, -3.703790], zoom: 12};
cities["Madrid"] = {center: [40.416775, -3.703790], zoom: 12};
cities["London"] = {center: [51.507351, -0.127758], zoom: 12};
cities["New York"] = {center: [40.712776, -74.005974], zoom: 12};
cities["Seoul"] = {center: [37.566536, 126.977966], zoom: 12};
cities["Paris"] = {center: [48.856613, 2.352222], zoom: 12};
cities["San Francisco"] = {center: [37.774929, -122.419418], zoom: 12};
cities["New Delhi"] = {center: [28.613939, 77.209023], zoom: 12};

export class Carto extends React.Component<Props> {
    private map: L.Map;
    private basemap: L.TileLayer;
    private attributionControl = L.control.attribution({position: 'bottomright', prefix: this.props.attributionText});

    // Set default properties
    static defaultProps = {
        city: "Madrid",
        latitude: cities["Madrid"].center[0],
        longitude: cities["Madrid"].center[1],
        zoom: cities["Madrid"].zoom,
        basemap: "voyager",
        zoomControl: true,
        attributions: true,
        attributionText: "Made with ❤️ from CARTO"
    }

    componentDidMount() {
        this.basemap = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/'+this.props.basemap+'/{z}/{x}/{y}.png');
        this.map = L.map('map', {
          center: [this.props.latitude, this.props.longitude],
          zoom: this.props.zoom,
          attributionControl: false,
          layers: [
            this.basemap,
          ]
        });
        this.map.addControl(this.attributionControl);
    }

    componentDidUpdate(prevProps){
        this.map.invalidateSize();
        if (this.props.latitude != prevProps.latitude || this.props.longitude != prevProps.longitude || this.props.city == "Custom...")
            this.map.setView(new L.LatLng(this.props.latitude, this.props.longitude), this.props.zoom);
        if (this.props.zoom != prevProps.zoom)
            this.map.setZoom(this.props.zoom);
        if (prevProps.basemap != this.props.basemap) {
            this.map.removeLayer(this.basemap);
            this.basemap = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/'+this.props.basemap+'/{z}/{x}/{y}.png');
            this.map.addLayer(this.basemap);
        }
        if (this.props.zoomControl != prevProps.zoomControl){
            this.props.zoomControl ? this.map.zoomControl.addTo(this.map) : this.map.zoomControl.remove();
        }
        if (this.props.attributions != prevProps.attributions){
            this.props.attributions ? this.map.addControl(this.attributionControl) : this.map.removeControl(this.attributionControl);
        }
        if (this.props.attributionText != prevProps.attributionText){
            this.map.removeControl(this.attributionControl);
            this.attributionControl = L.control.attribution({position: 'bottomright', prefix: this.props.attributionText});
            this.map.addControl(this.attributionControl);
        }
        if (this.props.city != prevProps.city && this.props.city != "Custom..."){
            let latLong = new L.LatLng(cities[this.props.city].center[0], cities[this.props.city].center[1]);
            this.map.setView(latLong, cities[this.props.city].zoom)
        }
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        city: {
            type: ControlType.Enum,
            options: Object.keys(cities),
            optionTitles: Object.keys(cities),
            title: "City"
        },
        latitude: { type: ControlType.Number, min: -90, max: 90, step: 0.00000000001, title: "Latitude", hidden: (props) => props.city != "Custom..." },
        longitude: { type: ControlType.Number, min: -180, max: 180, step: 0.00000000001, title: "Longitude", hidden: (props) => props.city != "Custom..."},
        zoom: { type: ControlType.Number, min: 0, max: 18, step: 1, title: "Zoom Level" },
        zoomControl: { type: ControlType.Boolean, title: "Zoom Control", disabledTitle: "Hide", enabledTitle: "Show" },
        attributions: { type: ControlType.Boolean, title: "Attributions", disabledTitle: "Hide", enabledTitle: "Show" },
        attributionText: { type: ControlType.String, title: "Text", hidden: (props) => !props.attributions },
        basemap: {  type: ControlType.Enum,
                    options: ["voyager", "dark_all", "light_all"],
                    optionTitles: ["Voyager", "Dark", "Light"]}//voyager_nolabels
    }

    render() {
        return <div style={style} id="map"></div>
    }
}
