import * as React from "react";
import { Frame, PropertyControls, ControlType } from "framer";
import twemoji from "twemoji";
import * as nodeEmoji from "node-emoji";

const wrapStyle: React.CSSProperties = {
    height: "100%",
    width: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    color: "#1DA1F2",
    background: "transparent",
    fontWeight: 600,
    fontSize: "0.8rem",
    overflow: "hidden"
};

const emojiStyle: React.CSSProperties = {
    height: "100%",
    width: "100%"
};

interface Props {
    search: string
}

export class TwemojiPicker extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        search: "üòç",
    };

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        search: { type: ControlType.String, title: "Search", placeholder: "Search for cat or üò∫" },
    }
    
    getEmoji(string) {      
        var div = document.createElement('div');
        if (nodeEmoji.find(string) == undefined) {
            div.textContent = "üî•"; // fallback 
        } else {
            // node-emoji seems to act weird when you type in an emoji on its own as a search like üò∏
            // so as a hack just say if it's a single char, just pass along directly to twemoji.parse
            (this.props.search.length == 1) ? div.textContent = string : div.textContent = nodeEmoji.find(string)['emoji'];
        }
        twemoji.parse(div, {ext: '.svg' , folder: 'svg'});
        return div.querySelector('img').src;
    }

    render() {
        if ((this.props.search.trim() == ("" || TwemojiPicker.defaultProps.search) || nodeEmoji.find(this.props.search) == undefined)) { 
            return <Frame style={wrapStyle}><img style={emojiStyle} src={this.getEmoji('üòç')}/></Frame>;
        } else {
            return <Frame style={wrapStyle}><img style={emojiStyle} src={this.getEmoji(this.props.search)}/></Frame>;
        } 
    }
}