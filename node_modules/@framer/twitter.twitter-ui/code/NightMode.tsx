import * as React from "react";
import { Data, Frame, Animatable, animate, PropertyControls, ControlType } from "framer"

interface Props {
    enabled: boolean
    accent: string
    width: number
    height: number
}

interface State {
    enabled: boolean
}

const App = Data({ 
    nightmode: false,
    whiteColor: "white",
    darkColor: "#1b2836",
    accentColorOne: "#1DA1F2", 
    noColor: "transparent",
    accentColor: "", 
    bgColor: "",
    iconFill: "", 
    fabFill: ""
});

const bgStyle: React.CSSProperties = {
    display: "flex",
    transition: "background 0.3s"
};

const fabStyle: React.CSSProperties = {
    width: "84px",
    height: "84px",
    borderRadius: "100px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    boxShadow: "0 6px 10px rgba(0,0,0,0.25)",
    border: "3px solid transparent",
    transition: "background 0.3s",
};

const iconStyle: React.CSSProperties = {
    height: "30px",
    width: "30px",
};


export class NightMode extends React.Component<Partial<Props>, State> {
    scaler = Animatable(1);
    
    static defaultProps = {
        width: "100%",
        height: "100%",
        enabled: false,
        accent: App.accentColorOne,
    }

    static propertyControls: PropertyControls<Props> = {
        enabled: { type: ControlType.Boolean, title: "Enabled" },
        accent: { type: ControlType.Color, title: "Accent color" },
    }
    
    state = {
        enabled: false
    }

    componentWillMount() {
        // init default colors
        this.setColors(this.props.enabled);
        App.nightmode = this.props.enabled;
    }

    componentDidMount() {
        const { enabled } = this.props
        this.setState({ enabled })
    }

    componentWillReceiveProps(props: Props) {
        if (props.enabled !== this.props.enabled) {
            this.setState({ enabled: props.enabled })
            this.setColors(props.enabled);
        }
        // if accent color changed... update all 
        this.setColors(props.enabled)
    }
    setColors = (enabled) => {
        if (enabled) {
            // dark colors
            App.accentColorOne = this.props.accent;
            App.bgColor = App.darkColor;
            App.accentColor = App.whiteColor;
            App.fabFill = App.accentColorOne;
            fabStyle.borderColor = App.noColor; 
            App.iconFill = App.whiteColor;
        } else {
            // light colors
            App.accentColorOne = this.props.accent;
            App.bgColor = App.whiteColor;
            App.accentColor = App.accentColorOne;
            App.fabFill = App.whiteColor;
            fabStyle.borderColor = App.accentColorOne;
            App.iconFill = App.accentColorOne;
        }
    }
    swapColors = async () => {
        if (App.nightmode) {
            this.setColors(false);
            App.nightmode = false;
            this.setState({ enabled: false })
        }  else {
            this.setColors(true);
            App.nightmode = true;
            this.setState({ enabled: true })
        } 

        await animate.easeIn(this.scaler, .9, {duration: 0.1}).finished
        await animate.easeOut(this.scaler, 1.1, {duration: 0.2}).finished
        await animate.easeInOut(this.scaler, 1, {duration: 0.15})
    }

    render() {
        const { width, height } = this.props
        return (
            <Frame 
                width={width} 
                height={height}
                background={App.bgColor}
                style={bgStyle}
            >
                <Frame scale={this.scaler} style={fabStyle} background={App.fabFill} onClick={this.swapColors}>
                    <svg width="30" height="30" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path fill={App.iconFill} d="M12.343 22.418h-.032C6.518 22.4 1.817 17.673 1.834 11.878c.014-4.935 3.382-9.138 8.19-10.22.272-.064.552.03.733.242.18.21.23.504.13.762-.373.948-.563 1.952-.566 2.982-.006 2.217.85 4.303 2.413 5.875 1.563 1.57 3.644 2.44 5.86 2.446.997.013 2.036-.18 2.987-.547.258-.1.552-.05.76.133.21.183.302.466.24.735-1.11 4.79-5.317 8.13-10.237 8.13zM9.06 3.513c-3.42 1.323-5.716 4.597-5.727 8.37-.014 4.968 4.016 9.02 8.983 9.035h.028c3.76 0 7.035-2.274 8.375-5.678-.695.152-1.41.222-2.13.227-2.616-.008-5.074-1.034-6.92-2.89-1.844-1.856-2.856-4.32-2.85-6.937.002-.72.082-1.433.24-2.127z"/>
                        <path opacity={App.nightmode ? 1 : 0} fill={App.iconFill} d="M12.343 22.418h-.032C6.518 22.4 1.817 17.673 1.834 11.878c.014-4.935 3.382-9.138 8.19-10.22.272-.063.552.032.733.242.18.21.23.504.13.762-.373.948-.563 1.952-.566 2.982-.006 2.217.85 4.303 2.413 5.875 1.563 1.57 3.644 2.44 5.86 2.446.997.008 2.036-.18 2.987-.547.258-.1.552-.05.76.133.21.183.302.466.24.735-1.11 4.79-5.317 8.13-10.237 8.13z"/>
                    </svg>
                </Frame>
            </Frame>
        )
    }
}
