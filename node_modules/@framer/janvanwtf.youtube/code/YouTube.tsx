import * as React from "react"
import { Frame, FramerEvent, Animatable, PropertyControls, ControlType, RenderTarget } from "framer"


interface Props {
    url: string
    play: string
    controls: string
    width: number
    height: number
}

export class YouTube extends React.Component<Props> {
    static defaultProps = {
        url: "https://www.youtube.com/watch?v=foSkKVtHkM4",
        controls: YouTube.controlsPlayback,
        play: YouTube.playNormal,
        width: 230,
        height: 120,
    }

    private static playNormal = "Off"
    private static playAuto = "On"
    private static playLoop = "Loop"

    private static controlsPlayback = "Playback"
    private static controlsInfo = "Video Info"
    private static controlsNone = "None"

    static propertyControls: PropertyControls<Props> = {
        url: { type: ControlType.String, title: "Video" },
        play: { type: ControlType.Enum, title: "Autoplay", options: [YouTube.playNormal, YouTube.playAuto, YouTube.playLoop] },
        // Trying to hide controls is a game of whack-a-mole because YouTube always wants to throw *something* onto the video
        // controls: { type: ControlType.Enum, title: "Controls", options: [YouTube.controlsPlayback, YouTube.controlsInfo, YouTube.controlsNone] },
    }

    render() {
        const { url, play, controls } = this.props

        const identifier = YouTube.guessIdentifier(url || YouTube.defaultProps.url) || "none" // At time of writing, an incorrect video ID produces an embed with a black background and play icon
        const autoplay = RenderTarget.current() == RenderTarget.preview && (play === YouTube.playAuto || play === YouTube.playLoop)
        const loop = autoplay && play === YouTube.playLoop
        const mute = autoplay
        const showsInfo = controls === YouTube.controlsInfo
        const showsControls = controls === YouTube.controlsPlayback

        // Notes on https://developers.google.com/youtube/player_parameters
        // If "controls" is defined at all, an inactive video will get a YouTube logo in the corner
        let src = `https://www.youtube.com/embed/${identifier}?playlist=${identifier}&showinfo=${showsInfo ? "1" : "0"}&autoplay=${autoplay ? "1" : "0"}&loop=${loop ? "1" : "0"}&mute=${mute ? "1" : "0"}&iv_load_policy=3&rel=0`
        if (showsControls || autoplay) {
            src += "&controls=" + (showsControls ? "1" : "0")
        }

        const width = Animatable.getNumber(this.props.width)
        const height = Animatable.getNumber(this.props.height)
        return (
            <iframe width={width} height={height} frameBorder={0} src={src} />
        )
    }

    private static guessIdentifier = (urlMaybe: string): string | null => {
        if (!urlMaybe) return null

        let identifier = ""

        // https://www.youtube.com/watch?v=cAs3senSITIve
        const watchPrefix = "youtube.com/watch?v="
        const watchIndex = urlMaybe.indexOf(watchPrefix)
        if (watchIndex >= 0) {
            identifier = urlMaybe.substring(watchIndex + watchPrefix.length)
        } else {
            // https://www.youtube.com/embed/cAs3senSITIve
            const embedPrefix = "youtube.com/embed/"
            const embedIndex = urlMaybe.indexOf(embedPrefix)
            if (embedIndex >= 0) {
                identifier = urlMaybe.substring(embedIndex + embedPrefix.length)
            } else {
                // https://youtu.be/cAs3senSITIve
                const shortenedPrefix = "youtu.be/"
                const shortenedIndex = urlMaybe.indexOf(shortenedPrefix)
                if (shortenedIndex >= 0) {
                    identifier = urlMaybe.substring(shortenedIndex + shortenedPrefix.length)
                } else {
                    // Everything else
                    identifier = urlMaybe
                }
            }
        }

        // Strip off the query string, if any
        const queryIndex = identifier.indexOf("?")
        if (queryIndex >= 0) {
            identifier = identifier.substring(0, queryIndex)
        }

        // What's left might be an identifier
        return identifier.match(/[\w_]+/) ? identifier : null
    }
}
